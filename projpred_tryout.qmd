---
title: "projpred_tryout"
format: html
author: Kim (Zhipei)
---

```{r}
seed <- 123
set.seed(seed)
library(tidyverse)
library(brms)
library(bayesplot)
library(projpred)
library(posterior)
library(data.table)
```

# scenario 1

## small n
```{r}
# read in the data with no correlation
# data_sierra_s1 = read.csv("p50/sim_p50_t10.csv")
# the dataset is huge so it reads too slow
```



```{r}
# read only the datasets going to be used for the sake of speed
# data_subset <- fread("p50/sim_p50_t10.csv")[N == 100 & r == 1]
# data_subset <- as.data.frame(data_subset)
# data_subset <- data_subset %>% select(-V1, -N, -r)
```

```{r}
# Define the function to load and preprocess the data
load_filter_standardize_data <- function(file_path, sample_size, replication) {
  
  # Read the data using fread and filter based on N and r
  data_subset <- fread(file_path)[N == sample_size & r == replication]
  
  # Convert to a data.frame
  data_subset <- as.data.frame(data_subset)
  
  # Select all columns except V1, N, and r
  data_subset <- data_subset %>% select(-V1, -N, -r)
  
  # Standardize the data except for the dependent variable y which is the first column
  standardized_data <- data_subset
  standardized_data[ , -1] <- scale(standardized_data[ , -1])
  
  return(standardized_data)
}
```



### small n replication 1
```{r}
# read in the data and take a look
data_s1_small_r1 <- load_filter_standardize_data("p50/sim_p50_t10.csv", sample_size = 100, replication = 1)

head(data_s1_small_r1)
```



```{r}
# data_s1_r1 <- data_sierra_s1 %>% 
#   filter(data_sierra_s1$N == 100, data_sierra_s1$r == 1) %>% # N is sample size, r is replication
#   select(-N, -r, -X) # X is index
# head(data_s1_r1)
```

```{r}
# # standardize the data
# data_s1_r1_scaled <- data_subset
# data_s1_r1_scaled[ , -1] <- scale(data_s1_r1_scaled[ , -1])
```


```{r}
# Number of regression coefficients:
D <- sum(grepl("^X", names(data_s1_small_r1)))

# number of true predictors
p0 <- 10

# number of observations
N <- nrow(data_s1_small_r1)

# Calculate par_ratio
par_ratio <- p0 / D
par_ratio
```



#### reference model
```{r}
#| chache: 
start.time <- Sys.time()

# set.seed(seed)
# refm_fit <- stan_glm(
#   y ~ .,
#   family = gaussian(),
#   data = data_r1,
#   prior = hs(global_scale = tau0),
#   chains = 4, iter = 2000,
#   refresh = 0
# )

refm_fit_s1_small_r1 <- brm(
  formula = y ~ ., 
  data = data_s1_small_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  backend = "cmdstanr"
 )

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
yrep <- posterior_predict(refm_fit_s1_small_r1, draws = 50)
ppc_dens_overlay(data_s1_small_r1$y, yrep)
```



#### Preliminary cv_varsel() run
```{r}
refm_obj_s1_small_r1 <- get_refmodel(refm_fit_s1_small_r1)
```


```{r}
# Preliminary cv_varsel() run:
start.time <- Sys.time()

cvvs_fast_s1_small_r1 <- cv_varsel(
  refm_obj_s1_small_r1,
  validate_search = FALSE,
  ### Only for the sake of speed (not recommended in general):
  method = "L1",
  refit_prj = FALSE,
  nterms_max = 15,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_fast_s1_small_r1, stats = "mlpd", ranking_nterms_max = NA)
```

```{r}
start.time <- Sys.time()

# Preliminary cv_varsel() run with `refit_prj = TRUE`:
cvvs_fast_refit_s1_small_r1 <- cv_varsel(
  cvvs_fast_s1_small_r1,
  nclusters_pred = 20,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_fast_refit_s1_small_r1, stats = "mlpd", ranking_nterms_max = NA)
```


https://mc-stan.org/projpred/reference/cv_varsel.html

ndraws
Number of posterior draws used in the search part. Ignored if nclusters is not NULL or in case of L1 search (because L1 search always uses a single cluster). If both (nclusters and ndraws) are NULL, the number of posterior draws from the reference model is used for ndraws. See also section "Details" below.

nclusters
Number of clusters of posterior draws used in the search part. Ignored in case of L1 search (because L1 search always uses a single cluster). For the meaning of NULL, see argument ndraws. See also section "Details" below.

ndraws_pred
Only relevant if refit_prj is TRUE. Number of posterior draws used in the evaluation part. Ignored if nclusters_pred is not NULL. If both (nclusters_pred and ndraws_pred) are NULL, the number of posterior draws from the reference model is used for ndraws_pred. See also section "Details" below.

nclusters_pred
Only relevant if refit_prj is TRUE. Number of clusters of posterior draws used in the evaluation part. For the meaning of NULL, see argument ndraws_pred. See also section "Details" below.

#### final cv_varsel() run kfold
```{r}
# final cv_varsel() run
start.time <- Sys.time()

# # Refit the reference model K times:
# cv_fits_10fold <- run_cvfun(
#   refm_obj,
#   K = 10
# )

cvvs_2fold_s1_small_r1 <- cv_varsel(
  refm_obj_s1_small_r1,
  cv_method = "kfold",
  K = 2,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
plot(cvvs_2fold_s1_small_r1, stats = "mlpd", deltas = TRUE)
```

https://mc-stan.org/projpred/articles/projpred.html#predictor-rankings-and-identification-of-the-selected-submodel
"For a given predictor x and a given submodel size j, the ranking proportion is the proportion of CV folds which have predictor x at position j of their predictor ranking."

0% ranking proportion: X6 is not the third predictor added to the model, but say for example first or second, that's why it is here with "0%".



```{r}
start.time <- Sys.time()

# 5-fold cv
cvvs_5fold_s1_small_r1 <- cv_varsel(
  refm_obj_s1_small_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```



```{r}
plot(cvvs_5fold_s1_small_r1, stats = "mlpd", deltas = TRUE)
```


```{r}
start.time <- Sys.time()

# 10-fold cv
cvvs_10fold_s1_small_r1 <- cv_varsel(
  refm_obj_s1_small_r1,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```



```{r}
plot(cvvs_10fold_s1_small_r1, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

# 10-fold cv
cvvs_10fold_s1_small_r1_1fulldrawspred <- cv_varsel(
  refm_obj_s1_small_r1,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  # ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```



```{r}
plot(cvvs_10fold_s1_small_r1_1fulldrawspred, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

# 10-fold cv with draw by draw projection
cvvs_10fold_s1_small_r1_dbd <- cv_varsel(
  refm_obj_s1_small_r1,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  # nclusters = 20,
  # ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```



```{r}
plot(cvvs_10fold_s1_small_r1_dbd, stats = "mlpd", deltas = TRUE)
```

Using draw by draw doesn't help. Increasing number of folds also does not help in the sense that they are including right variables. By increasing #folds, more "confidence" (ranking proportions) has been shown in the variables chosen (whether they are correct or not).


#### final cv_varsel() run LOO
We don't want to use LOO because it will take forever, and if we use approximation, that's not what we want.
```{r}
# final cv_varsel() run LOO
# start.time <- Sys.time()
# 
# # Refit the reference model using LOO-CV
# 
# cvvs_loo_s1_small_r1 <- cv_varsel(
#   refm_obj_s1_small_r1,
#   cv_method = "LOO",
#   # nloo = 1000,
#   method = "L1",
#   # nclusters = 20,
#   # ndraws_pred = 400,
#   nclusters_pred = 20,
#   nterms_max = 11,
#   verbose = FALSE
# )
# 
# end.time <- Sys.time()
# time.taken <- round(end.time - start.time,2)
# time.taken
```

```{r}
plot(cvvs_loo_s1_small_r1, stats = "mlpd", deltas = TRUE)
```

Takes forever when changing L1 to forward
```{r}
# final cv_varsel() run LOO
# start.time <- Sys.time()
# 
# # Refit the reference model using LOO-CV
# 
# cvvs_loo_s1_small_r1 <- cv_varsel(
#   refm_obj_s1_small_r1,
#   cv_method = "LOO",
#   # nloo = 1000,
#   method = "forward",
#   # nclusters = 20,
#   # ndraws_pred = 400,
#   nclusters_pred = 20,
#   nterms_max = 11,
#   verbose = FALSE
# )
# 
# end.time <- Sys.time()
# time.taken <- round(end.time - start.time,2)
# time.taken
```


```{r}
print(paste("The suggested model size based on MLPD using 2-fold-CV is", suggest_size(cvvs_2fold_s1_small_r1, stat = "mlpd")))
print(paste("The suggested model size based on MLPD using 5-fold-CV is", suggest_size(cvvs_5fold_s1_small_r1, stat = "mlpd")))
print(paste("The suggested model size based on MLPD using 10-fold-CV is", suggest_size(cvvs_10fold_s1_small_r1, stat = "mlpd")))
# print(paste("The suggested model size based on MLPD using LOO-CV is", suggest_size(cvvs_loo_s1_r1, stat = "mlpd")))
```


#### cv run summary
```{r}
# smmry <- summary(cvvs_loo, stats = "mlpd", type = c("mean", "lower", "upper"),
#                  deltas = TRUE)
# print(smmry, digits = 1)
```

#### variable selection
```{r}
# # predictor rankings
# rk <- ranking(cvvs_loo)
```


```{r}
# # ranking proportions
# ( pr_rk <- cv_proportions(rk) )
```

```{r}
# rk[["fulldata"]]
```

```{r}
# plot(pr_rk)
```

```{r}
# rk_s1_r1_2fold <- ranking(cvvs_2fold_s1_r1)
# rk_s1_r1_5fold <- ranking(cvvs_5fold_s1_r1)
# rk_s1_r1_10fold <- ranking(cvvs_10fold_s1_r1)
# rk_s1_r1_loo <- ranking(cvvs_loo_s1_r1)
# 
# suggested_size_s1_r1_2fold <- suggest_size(cvvs_2fold_s1_r1, stat = "mlpd")
# suggested_size_s1_r1_5fold <- suggest_size(cvvs_5fold_s1_r1, stat = "mlpd")
# suggested_size_s1_r1_10fold <- suggest_size(cvvs_10fold_s1_r1, stat = "mlpd")
# suggested_size_s1_r1_loo <- suggest_size(cvvs_loo_s1_r1, stat = "mlpd")
# 
# predictors_final_s1_r1_2fold <- head(rk_s1_r1_2fold[["fulldata"]], suggested_size_s1_r1_2fold)
# predictors_final_s1_r1_5fold <- head(rk_s1_r1_5fold[["fulldata"]], suggested_size_s1_r1_5fold)
# predictors_final_s1_r1_10fold <- head(rk_s1_r1_10fold[["fulldata"]], suggested_size_s1_r1_10fold)
# predictors_final_s1_r1_loo <- head(rk_s1_r1_loo[["fulldata"]], suggested_size_s1_r1_loo)
```

```{r}
# plot(cv_proportions(rk, cumulate = TRUE))
```

#### projection
```{r}
# final submodel once again
# prj_2fold <- project(refm_obj, predictor_terms = predictors_final_s1_r1_2fold, verbose = FALSE)
# prj_5fold <- project(refm_obj, predictor_terms = predictors_final_s1_r1_5fold, verbose = FALSE)
# prj_10fold <- project(refm_obj, predictor_terms = predictors_final_s1_r1_10fold, verbose = FALSE)
# prj_loo <- project(refm_obj, predictor_terms = predictors_final_s1_r1_loo, verbose = FALSE)
```

```{r}
# prj_mat <- as.matrix(prj)
```

```{r}
# prj_drws <- as_draws_matrix(prj_mat)
# prj_smmry <- summarize_draws(
#   prj_drws,
#   "median", "mad", function(x) quantile(x, probs = c(0.025, 0.975))
# )
# 
# prj_smmry <- as.data.frame(prj_smmry)
# print(prj_smmry, digits = 1)
```

```{r}
# bayesplot_theme_set(ggplot2::theme_bw())
# mcmc_intervals(prj_mat) +
#   ggplot2::coord_cartesian(xlim = c(-1.5, 1.6))
```

```{r}
# refm_mat <- as.matrix(refm_fit)
# mcmc_intervals(refm_mat, pars = colnames(prj_mat)) +
#   ggplot2::coord_cartesian(xlim = c(-1.5, 1.6))
```

#### confusion matrix
```{r}
# calculate_inclusion_metrics <- function(selected_predictors, true_predictors, total_predictors = 50) {
#   # Calculate metrics
#   true_inclusion <- sum(selected_predictors %in% true_predictors)                    # Correctly included
#   false_inclusion <- sum(!(selected_predictors %in% true_predictors))                # Incorrectly included
#   false_exclusion <- sum(true_predictors %in% true_predictors & 
#                          !(true_predictors %in% selected_predictors))                # Incorrectly excluded
#   true_exclusion <- total_predictors - true_inclusion - false_inclusion - false_exclusion  # Correctly excluded
# 
#   # Construct the confusion matrix
#   confusion_matrix <- matrix(
#     c(true_inclusion, false_exclusion, false_inclusion, true_exclusion),
#     nrow = 2,
#     byrow = TRUE,
#     dimnames = list("Actual" = c("Non-zero", "Zero"), "Predicted" = c("Included", "Excluded"))
#   )
#   
#   return(confusion_matrix)
# }
```


```{r}
# true_predictors <- paste0("X", 1:10)
# 
# confusion_matrix <- calculate_inclusion_metrics(predictors_final, true_predictors)
# print(confusion_matrix)
```

```{r}
calculate_inclusion_metrics <- function(selected_predictors, true_predictors, total_predictors = 50) {
  # Calculate the number of predictors
  true_inclusion <- sum(selected_predictors %in% true_predictors)                    # Correctly included
  false_inclusion <- sum(!(selected_predictors %in% true_predictors))                # Incorrectly included
  false_exclusion <- sum(true_predictors %in% true_predictors & 
                         !(true_predictors %in% selected_predictors))                # Incorrectly excluded
  true_exclusion <- total_predictors - true_inclusion - false_inclusion - false_exclusion  # Correctly excluded

  # Calculate rates
  true_inclusion_rate <- true_inclusion / length(true_predictors)                    # Proportion of true predictors correctly included
  false_inclusion_rate <- false_inclusion / (total_predictors - length(true_predictors))  # Proportion of irrelevant predictors incorrectly included
  true_exclusion_rate <- true_exclusion / (total_predictors - length(true_predictors))    # Proportion of irrelevant predictors correctly excluded
  false_exclusion_rate <- false_exclusion / length(true_predictors)                  # Proportion of true predictors incorrectly excluded

  # Construct the confusion matrix
  confusion_matrix <- matrix(
    c(true_inclusion, false_exclusion, false_inclusion, true_exclusion),
    nrow = 2,
    byrow = TRUE,
    dimnames = list("Actual" = c("Non-zero", "Zero"), "Predicted" = c("Included", "Excluded"))
  )

  # Print rates
  cat("\nTrue Inclusion Rate:", round(true_inclusion_rate, 3))
  cat("\nFalse Inclusion Rate:", round(false_inclusion_rate, 3))
  cat("\nTrue Exclusion Rate:", round(true_exclusion_rate, 3))
  cat("\nFalse Exclusion Rate:", round(false_exclusion_rate, 3), "\n")

  return(list(
    confusion_matrix = confusion_matrix,
    true_inclusion_rate = true_inclusion_rate,
    false_inclusion_rate = false_inclusion_rate,
    true_exclusion_rate = true_exclusion_rate,
    false_exclusion_rate = false_exclusion_rate
  ))
}

```


```{r}
generate_analysis_results <- function(cv_results_list, true_predictors, custom_size = NULL) {
  final_predictors_list <- list()
  confusion_matrices <- list()
  
  # Loop over each cross-validation result in the list
  for (method in names(cv_results_list)) {
    cat("\nProcessing", method, "Cross-Validation:\n")
    
    # Generate ranking
    ranking_result <- ranking(cv_results_list[[method]])
    
    # Determine the size: either suggested or user-specified
    if (is.null(custom_size)) {
      suggested_size <- suggest_size(cv_results_list[[method]], stat = "mlpd")
    } else {
      suggested_size <- custom_size
    }
    
    # Get the final selected predictors
    final_predictors <- head(ranking_result[["fulldata"]], suggested_size)
    final_predictors_list[[method]] <- final_predictors
    
    # Generate and print the confusion matrix
    confusion_matrix <- calculate_inclusion_metrics(final_predictors, true_predictors)
    print(confusion_matrix)
    confusion_matrices[[method]] <- confusion_matrix
  }
  
  # return(list(
  #   final_predictors = final_predictors_list,
  #   confusion_matrices = confusion_matrices
  # ))
}

```


```{r}
# cross_validation list
cv_results_list <- list(
  "2-fold" = cvvs_2fold_s1_small_r1,
  "5-fold" = cvvs_5fold_s1_small_r1,
  "10-fold" = cvvs_10fold_s1_small_r1
)

# Define true predictors
true_predictors <- paste0("X", 1:10)

# Run the function and get the analysis results
generate_analysis_results(cv_results_list, true_predictors, custom_size = 10)
```

##### defaults when fitting reference model

```{r}
start.time <- Sys.time()

refm_default_fit_s1_small_r1 <- brm(
  formula = y ~ ., 
  data = data_s1_small_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_default_fit_s1_small_r1, draws = 50)
ppc_dens_overlay(data_s1_small_r1$y, yrep)
```

```{r}
refm_default_obj_s1_small_r1 <- get_refmodel(refm_default_fit_s1_small_r1)
```



```{r}
start.time <- Sys.time()

cvvs_5fold_s1_small_r1_default_refm <- cv_varsel(
  refm_default_obj_s1_small_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s1_small_r1_default_refm, stats = "mlpd", deltas = TRUE)
```


### small n replication 2
```{r}
# read in the data and take a look
data_s1_small_r2 <- load_filter_standardize_data("p50/sim_p50_t10.csv", sample_size = 100, replication = 2)

head(data_s1_small_r2)
```

#### reference model
```{r}
start.time <- Sys.time()

# set.seed(seed)
# refm_fit <- stan_glm(
#   y ~ .,
#   family = gaussian(),
#   data = data_r1,
#   prior = hs(global_scale = tau0),
#   chains = 4, iter = 2000,
#   refresh = 0
# )

refm_fit_s1_small_r2 <- brm(
  formula = y ~ ., 
  data = data_s1_small_r2,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
refm_obj_s1_small_r2 <- get_refmodel(refm_fit_s1_small_r2)
```

#### cv_varsel() run on k-fold
```{r}
# final cv_varsel() run
start.time <- Sys.time()

cvvs_2fold_s1_small_r2 <- cv_varsel(
  refm_obj_s1_small_r2,
  cv_method = "kfold",
  K = 2,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
plot(cvvs_2fold_s1_small_r2, stats = "mlpd", deltas = TRUE)
```


```{r}
start.time <- Sys.time()

# 5-fold cv
cvvs_5fold_s1_small_r2 <- cv_varsel(
  refm_obj_s1_small_r2,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
plot(cvvs_5fold_s1_small_r2, stats = "mlpd", deltas = TRUE)
```


```{r}
start.time <- Sys.time()

# 10-fold cv
cvvs_10fold_s1_small_r2 <- cv_varsel(
  refm_obj_s1_small_r2,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
plot(cvvs_10fold_s1_small_r2, stats = "mlpd", deltas = TRUE)
```

```{r}
print(paste("The suggested model size based on MLPD using 2-fold-CV is", suggest_size(cvvs_2fold_s1_small_r2, stat = "mlpd")))
print(paste("The suggested model size based on MLPD using 5-fold-CV is", suggest_size(cvvs_5fold_s1_small_r2, stat = "mlpd")))
print(paste("The suggested model size based on MLPD using 10-fold-CV is", suggest_size(cvvs_10fold_s1_small_r2, stat = "mlpd")))
```
#### confusion matrix
```{r}
# cross_validation list
cv_results_list <- list(
  "2-fold" = cvvs_2fold_s1_small_r2,
  "5-fold" = cvvs_5fold_s1_small_r2,
  "10-fold" = cvvs_10fold_s1_small_r2
)

# Define true predictors
true_predictors <- paste0("X", 1:10)

# Run the function and get the analysis results
generate_analysis_results(cv_results_list, true_predictors, custom_size = 10)
```

## large n
### large n replication 1
```{r}
# read in the data and take a look
data_s1_large_r1 <- load_filter_standardize_data("p50/sim_p50_t10.csv", sample_size = 400, replication = 1)

head(data_s1_large_r1)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s1_large_r1 <- brm(
  formula = y ~ ., 
  data = data_s1_large_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s1_large_r1, draws = 50)
ppc_dens_overlay(data_s1_large_r1$y, yrep)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s1_large_r1 <- get_refmodel(refm_fit_s1_large_r1)
```


```{r}
start.time <- Sys.time()

cvvs_2fold_s1_large_r1 <- cv_varsel(
  refm_obj_s1_large_r1,
  cv_method = "kfold",
  K = 2,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_2fold_s1_large_r1, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

cvvs_5fold_s1_large_r1 <- cv_varsel(
  refm_obj_s1_large_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s1_large_r1, stats = "mlpd", deltas = TRUE)
```


# scenario 2
corr 0.4 and mixed true effects
## small n

```{r}
# read in the data with correlation 0.4
# data_sierra_s2 = read.csv("p50/sim_p50_t10_corr0.4_first10.csv")
```

```{r}
# data_s2_r1 <- data_sierra_s2 %>% 
#   filter(data_sierra_s2$N == 100, data_sierra_s2$r == 1) %>%
#   select(-N, -r, -X)
# head(data_s2_r1)
```

### small n replication 1
```{r}
# read in the data and take a look
data_s2_small_r1 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.4_first10.csv", sample_size = 100, replication = 1)

head(data_s2_small_r1)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s2_small_r1 <- brm(
  formula = y ~ ., 
  data = data_s2_small_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s2_small_r1, draws = 50)
ppc_dens_overlay(data_s2_small_r1$y, yrep)
```


#### Preliminary cv_varsel() run


```{r}
# Preliminary cv_varsel() run:
# start.time <- Sys.time()
# 
# cvvs_fast_s2 <- cv_varsel(
#   refm_obj_s2,
#   validate_search = FALSE,
#   ### Only for the sake of speed (not recommended in general):
#   method = "L1",
#   refit_prj = FALSE,
#   nterms_max = 20,
#   verbose = FALSE
# )
# 
# end.time <- Sys.time()
# time.taken <- round(end.time - start.time,2)
# time.taken
```

```{r}
# plot(cvvs_fast_s2, stats = "mlpd", ranking_nterms_max = NA)
```

```{r}
# start.time <- Sys.time()
# 
# # Preliminary cv_varsel() run with `refit_prj = TRUE`:
# cvvs_fast_refit_s2 <- cv_varsel(
#   cvvs_fast_s2,
#   nclusters_pred = 20,
#   verbose = FALSE
# )
# 
# end.time <- Sys.time()
# time.taken <- round(end.time - start.time,2)
# time.taken
```

```{r}
# plot(cvvs_fast_refit_s2, stats = "mlpd", ranking_nterms_max = NA)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s2_small_r1 <- get_refmodel(refm_fit_s2_small_r1)
```


```{r}
start.time <- Sys.time()

cvvs_5fold_s2_small_r1 <- cv_varsel(
  refm_obj_s2_small_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s2_small_r1, stats = "mlpd", deltas = TRUE)
```


```{r}
start.time <- Sys.time()

# 10-fold cv
cvvs_10fold_s2_small_r1 <- cv_varsel(
  refm_obj_s2_small_r1,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_10fold_s2_small_r1, stats = "mlpd", deltas = TRUE)
```


#### final cv_varsel() run LOO
```{r}
# final cv_varsel() run LOO
# start.time <- Sys.time()
# 
# # Refit the reference model using LOO-CV
# 
# cvvs_loo_s2 <- cv_varsel(
#   refm_obj_s2,
#   cv_method = "LOO",
#   nloo = N,
#   method = "L1",
#   nclusters_pred = 20,
#   nterms_max = 13,
#   verbose = FALSE
# )
# 
# end.time <- Sys.time()
# time.taken <- round(end.time - start.time,2)
# time.taken
```


```{r}
# plot(cvvs_loo_s2, stats = "mlpd", deltas = TRUE)
```


```{r}
# suggest_size(cvvs_loo_s2, stat = "mlpd")
```

#### cv run summary
```{r}
# smmry <- summary(cvvs_loo_s2, stats = "mlpd", type = c("mean", "lower", "upper"),
#                  deltas = TRUE)
# print(smmry, digits = 1)
```

#### variable selection
```{r}
# predictor rankings
# rk_s2 <- ranking(cvvs_loo_s2)
```


```{r}
# ranking proportions
# pr_rk_s2 <- cv_proportions(rk_s2)
```

```{r}
# rk_s2[["fulldata"]]
```

```{r}
# plot(pr_rk_s2)
```

```{r}
# predictors_final <- head(rk_s2[["fulldata"]], 8)
```

```{r}
# plot(cv_proportions(rk_s2, cumulate = TRUE))
```
#### projection
```{r}
# final submodel once again
prj_s2 <- project(
  refm_obj_s2,
  predictor_terms = predictors_final,
  verbose = FALSE
)
```

```{r}
prj_mat_s2 <- as.matrix(prj_s2)
```

```{r}
prj_drws_s2 <- as_draws_matrix(prj_mat_s2)
prj_smmry_s2 <- summarize_draws(
  prj_drws_s2,
  "median", "mad", function(x) quantile(x, probs = c(0.025, 0.975))
)

prj_smmry_s2 <- as.data.frame(prj_smmry_s2)
print(prj_smmry_s2, digits = 1)
```

#### confusion matrix

```{r}
# cross_validation list
cv_results_list <- list(
  "5-fold" = cvvs_5fold_s2_small_r1,
  "10-fold" = cvvs_10fold_s2_small_r1
)

# Define true predictors
true_predictors <- paste0("X", 1:10)

# Run the function and get the analysis results
generate_analysis_results(cv_results_list, true_predictors, custom_size = 10)
```


##### defaults when fitting reference model

```{r}
start.time <- Sys.time()

refm_default_fit_s2_small_r1 <- brm(
  formula = y ~ ., 
  data = data_s2_small_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_default_fit_s2_small_r1, draws = 50)
ppc_dens_overlay(data_s2_small_r1$y, yrep)
```

```{r}
refm_default_obj_s2_small_r1 <- get_refmodel(refm_default_fit_s2_small_r1)
```



```{r}
start.time <- Sys.time()

cvvs_5fold_s2_small_r1_default_refm <- cv_varsel(
  refm_default_obj_s2_small_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s2_small_r1_default_refm, stats = "mlpd", deltas = TRUE)
```

### small n replication 2
```{r}
# read in the data and take a look
data_s2_small_r2 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.4_first10.csv", sample_size = 100, replication = 2)

head(data_s2_small_r2)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s2_small_r2 <- brm(
  formula = y ~ ., 
  data = data_s2_small_r2,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
yrep <- posterior_predict(refm_fit_s2_small_r2, draws = 50)
ppc_dens_overlay(data_s2_small_r2$y, yrep)
```

#### final cv_varsel() run kfold
```{r}
refm_obj_s2_small_r2 <- get_refmodel(refm_fit_s2_small_r2)
```


```{r}
start.time <- Sys.time()

cvvs_5fold_s2_small_r2 <- cv_varsel(
  refm_obj_s2_small_r2,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s2_small_r2, stats = "mlpd", deltas = TRUE)
```

Again replication 2 is better. A pattern?...

#### confusion matrix
```{r}
# cross_validation list
cv_results_list <- list(
  "2-fold" = cvvs_2fold_s2_small_r2,
  "5-fold" = cvvs_5fold_s2_small_r2
)

# Define true predictors
true_predictors <- paste0("X", 1:10)

# Run the function and get the analysis results
generate_analysis_results(cv_results_list, true_predictors, custom_size = 10)
```

## large n
### large n replication 1
```{r}
# read in the data and take a look
data_s2_large_r1 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.4_first10.csv", sample_size = 400, replication = 1)

head(data_s2_large_r1)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s2_large_r1 <- brm(
  formula = y ~ ., 
  data = data_s2_large_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s2_large_r1, draws = 50)
ppc_dens_overlay(data_s2_large_r1$y, yrep)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s2_large_r1 <- get_refmodel(refm_fit_s2_large_r1)
```


```{r}
start.time <- Sys.time()

cvvs_2fold_s2_large_r1 <- cv_varsel(
  refm_obj_s2_large_r1,
  cv_method = "kfold",
  K = 2,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_2fold_s2_large_r1, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

cvvs_5fold_s2_large_r1 <- cv_varsel(
  refm_obj_s2_large_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s2_large_r1, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

# 10-fold cv
cvvs_10fold_s2_large_r1 <- cv_varsel(
  refm_obj_s2_large_r1,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_10fold_s2_large_r1, stats = "mlpd", deltas = TRUE)
```

For large n (400) here in scenario 2, 2-fold and 5-fold seems enough to identify the right set of predictors, but the "confidence" (ranking proportions) is not much with 2-fold and 5-fold.

```{r}
print(paste("The suggested model size based on MLPD using 2-fold-CV is", suggest_size(cvvs_2fold_s2_large_r1, stat = "mlpd")))
print(paste("The suggested model size based on MLPD using 5-fold-CV is", suggest_size(cvvs_5fold_s2_large_r1, stat = "mlpd")))
print(paste("The suggested model size based on MLPD using 10-fold-CV is", suggest_size(cvvs_10fold_s2_large_r1, stat = "mlpd")))
```


# scenario 3
corr 0.4 and clustered true effects
## small n
### small n replication 1
```{r}
# read in the data and take a look
# the suffix says "mixed", but it corresponds to corr 0.4 clustered true effects in table 2 in paper
data_s3_small_r1 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.4_mixed.csv", sample_size = 100, replication = 1)

head(data_s3_small_r1)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s3_small_r1 <- brm(
  formula = y ~ ., 
  data = data_s3_small_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s3_small_r1, draws = 50)
ppc_dens_overlay(data_s3_small_r1$y, yrep)
```



#### final cv_varsel() run kfold
```{r}
refm_obj_s3_small_r1 <- get_refmodel(refm_fit_s3_small_r1)
```


```{r}
start.time <- Sys.time()

cvvs_5fold_s3_small_r1 <- cv_varsel(
  refm_obj_s3_small_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s3_small_r1, stats = "mlpd", deltas = TRUE)
```

X1, X6, X11, X16, X21, X26, X31, X36, X41, X46 are true predictors
ordering should be X1, X26, (X6, X11, X31, X36), (X16, X21, X41, X46)

```{r}
start.time <- Sys.time()

cvvs_10fold_s3_small_r1 <- cv_varsel(
  refm_obj_s3_small_r1,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```
A warning message not seen before

```{r}
plot(cvvs_10fold_s3_small_r1, stats = "mlpd", deltas = TRUE)
```

X1, X6, X11, X16, X21, X26, X31, X36, X41, X46 are true predictors
ordering should be X1, X26, (X6, X11, X31, X36), (X16, X21, X41, X46)

#### final cv_varsel() run LOO
```{r}
# final cv_varsel() run LOO
start.time <- Sys.time()

# Refit the reference model using LOO-CV

cvvs_loo_s3 <- cv_varsel(
  refm_obj_s3,
  cv_method = "LOO",
  nloo = N,
  method = "L1",
  nclusters_pred = 20,
  nterms_max = 13,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
plot(cvvs_loo_s3, stats = "mlpd", deltas = TRUE)
```

```{r}
# final cv_varsel() run LOO
start.time <- Sys.time()

# Refit the reference model using LOO-CV

cvvs_loo_s3_nterms_max_15 <- cv_varsel(
  refm_obj_s3,
  cv_method = "LOO",
  nloo = N,
  method = "L1",
  nclusters_pred = 20,
  nterms_max = 15,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
plot(cvvs_loo_s3_nterms_max_15, stats = "mlpd", deltas = TRUE)
```


```{r}
suggest_size(cvvs_loo_s3_nterms_max_15, stat = "mlpd")
```

#### cv run summary
```{r}
# smmry <- summary(cvvs_loo_s3, stats = "mlpd", type = c("mean", "lower", "upper"),
#                  deltas = TRUE)
# print(smmry, digits = 1)
```

#### variable selection
```{r}
# predictor rankings
rk_s3 <- ranking(cvvs_loo_s3_nterms_max_15)
```


```{r}
# ranking proportions
pr_rk_s3 <- cv_proportions(rk_s3)
```

```{r}
rk_s3[["fulldata"]]
```

```{r}
plot(pr_rk_s3)
```

```{r}
plot(cv_proportions(rk_s3, cumulate = TRUE))
```


```{r}
predictors_final <- head(rk_s3[["fulldata"]], 13)
```

#### projection
```{r}
# final submodel once again
prj_s3 <- project(
  refm_obj_s3,
  predictor_terms = predictors_final,
  verbose = FALSE
)
```

```{r}
prj_mat_s3 <- as.matrix(prj_s3)
```

```{r}
prj_drws_s3 <- as_draws_matrix(prj_mat_s3)
prj_smmry_s3 <- summarize_draws(
  prj_drws_s3,
  "median", "mad", function(x) quantile(x, probs = c(0.025, 0.975))
)

prj_smmry_s3 <- as.data.frame(prj_smmry_s3)
print(prj_smmry_s3, digits = 1)
```

#### confusion matrix
```{r}
# cross_validation list
cv_results_list <- list(
  "5-fold" = cvvs_5fold_s3_small_r1,
  "10-fold" = cvvs_10fold_s3_small_r1
)

# Define true predictors
true_predictors <- paste0("X", seq(1, 50, 5))

# Run the function and get the analysis results
generate_analysis_results(cv_results_list, true_predictors, custom_size = 10)
```


##### defaults when fitting reference model

```{r}
start.time <- Sys.time()

refm_default_fit_s3_small_r1 <- brm(
  formula = y ~ ., 
  data = data_s3_small_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_default_fit_s3_small_r1, draws = 50)
ppc_dens_overlay(data_s3_small_r1$y, yrep)
```

```{r}
refm_default_obj_s3_small_r1 <- get_refmodel(refm_default_fit_s3_small_r1)
```



```{r}
start.time <- Sys.time()

cvvs_5fold_s3_small_r1_default_refm <- cv_varsel(
  refm_default_obj_s3_small_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s3_small_r1_default_refm, stats = "mlpd", deltas = TRUE)
```


### small n replication 2
```{r}
# read in the data and take a look
data_s3_small_r2 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.4_mixed.csv", sample_size = 100, replication = 2)

head(data_s3_small_r2)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s3_small_r2 <- brm(
  formula = y ~ ., 
  data = data_s3_small_r2,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s3_small_r2, draws = 50)
ppc_dens_overlay(data_s3_small_r2$y, yrep)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s3_small_r2 <- get_refmodel(refm_fit_s3_small_r2)
```


```{r}
start.time <- Sys.time()

cvvs_2fold_s3_small_r2 <- cv_varsel(
  refm_obj_s3_small_r2,
  cv_method = "kfold",
  K = 2,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_2fold_s3_small_r2, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

cvvs_5fold_s3_small_r2 <- cv_varsel(
  refm_obj_s3_small_r2,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s3_small_r2, stats = "mlpd", deltas = TRUE)
```


#### confusion matrix
```{r}
# cross_validation list
cv_results_list <- list(
  "2-fold" = cvvs_2fold_s3_small_r2,
  "5-fold" = cvvs_5fold_s3_small_r2
)

# Define true predictors
true_predictors <- paste0("X", seq(1, 50, 5))

# Run the function and get the analysis results
generate_analysis_results(cv_results_list, true_predictors, custom_size = 10)
```

## large n
### large n replication 1
```{r}
# read in the data and take a look
data_s3_large_r1 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.4_mixed.csv", sample_size = 400, replication = 1)

head(data_s3_large_r1)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s3_large_r1 <- brm(
  formula = y ~ ., 
  data = data_s3_large_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s3_large_r1, draws = 50)
ppc_dens_overlay(data_s3_large_r1$y, yrep)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s3_large_r1 <- get_refmodel(refm_fit_s3_large_r1)
```


```{r}
start.time <- Sys.time()

cvvs_2fold_s3_large_r1 <- cv_varsel(
  refm_obj_s3_large_r1,
  cv_method = "kfold",
  K = 2,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_2fold_s3_large_r1, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

cvvs_5fold_s3_large_r1 <- cv_varsel(
  refm_obj_s3_large_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s3_large_r1, stats = "mlpd", deltas = TRUE)
```

# scenario 4
corr 0.8 and mixed true effects
## small n
### small n replication 1
```{r}
# read in the data and take a look
data_s4_small_r1 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.8_first10.csv", sample_size = 100, replication = 1)

head(data_s4_small_r1)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s4_small_r1 <- brm(
  formula = y ~ ., 
  data = data_s4_small_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s4_small_r1, draws = 50)
ppc_dens_overlay(data_s4_small_r1$y, yrep)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s4_small_r1 <- get_refmodel(refm_fit_s4_small_r1)
```


```{r}
start.time <- Sys.time()

cvvs_5fold_s4_small_r1 <- cv_varsel(
  refm_obj_s4_small_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s4_small_r1, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

cvvs_10fold_s4_small_r1 <- cv_varsel(
  refm_obj_s4_small_r1,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_10fold_s4_small_r1, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

cvvs_10fold_s4_small_r1_fulldrawspred <- cv_varsel(
  refm_obj_s4_small_r1,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  # ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_10fold_s4_small_r1_fulldrawspred, stats = "mlpd", deltas = TRUE)
```



#### confusion matrix

```{r}
# cross_validation list
cv_results_list <- list(
  "2-fold" = cvvs_2fold_s4_small_r1,
  "5-fold" = cvvs_5fold_s4_small_r1,
  "10-fold" = cvvs_10fold_s4_small_r1
)

# Define true predictors
true_predictors <- paste0("X", 1:10)

# Run the function and get the analysis results
generate_analysis_results(cv_results_list, true_predictors, custom_size = 10)
```


##### defaults when fitting reference model

```{r}
start.time <- Sys.time()

refm_default_fit_s4_small_r1 <- brm(
  formula = y ~ ., 
  data = data_s4_small_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_default_fit_s4_small_r1, draws = 50)
ppc_dens_overlay(data_s4_small_r1$y, yrep)
```

```{r}
refm_default_obj_s4_small_r1 <- get_refmodel(refm_default_fit_s4_small_r1)
```



```{r}
start.time <- Sys.time()

cvvs_5fold_s4_small_r1_default_refm <- cv_varsel(
  refm_default_obj_s4_small_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s4_small_r1_default_refm, stats = "mlpd", deltas = TRUE)
```


### small n replication 2
```{r}
# read in the data and take a look
data_s4_small_r2 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.8_first10.csv", sample_size = 100, replication = 2)

head(data_s4_small_r2)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s4_small_r2 <- brm(
  formula = y ~ ., 
  data = data_s4_small_r2,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s4_small_r2, draws = 50)
ppc_dens_overlay(data_s4_small_r2$y, yrep)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s4_small_r2 <- get_refmodel(refm_fit_s4_small_r2)
```



```{r}
start.time <- Sys.time()

cvvs_5fold_s4_small_r2 <- cv_varsel(
  refm_obj_s4_small_r2,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s4_small_r2, stats = "mlpd", deltas = TRUE)
```

#### confusion matrix
```{r}
# cross_validation list
cv_results_list <- list(
  "2-fold" = cvvs_2fold_s1_small_r1,
  "5-fold" = cvvs_5fold_s1_small_r1
)

# Define true predictors
true_predictors <- paste0("X", 1:10)

# Run the function and get the analysis results
generate_analysis_results(cv_results_list, true_predictors, custom_size = 10)
```

## large n
### large n replication 1
```{r}
# read in the data and take a look
data_s4_large_r1 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.8_first10.csv", sample_size = 400, replication = 1)

head(data_s4_large_r1)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s4_large_r1 <- brm(
  formula = y ~ ., 
  data = data_s4_large_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s4_large_r1, draws = 50)
ppc_dens_overlay(data_s4_large_r1$y, yrep)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s4_large_r1 <- get_refmodel(refm_fit_s4_large_r1)
```


```{r}
start.time <- Sys.time()

cvvs_2fold_s4_large_r1 <- cv_varsel(
  refm_obj_s4_large_r1,
  cv_method = "kfold",
  K = 2,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_2fold_s4_large_r1, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

cvvs_5fold_s4_large_r1 <- cv_varsel(
  refm_obj_s4_large_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s4_large_r1, stats = "mlpd", deltas = TRUE)
```



# scenario 5
corr 0.8 and clustered true effects
## small n
### small n replication 1
```{r}
# read in the data and take a look
data_s5_small_r1 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.8_mixed.csv", sample_size = 100, replication = 1)

head(data_s5_small_r1)
```



#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s5_small_r1 <- brm(
  formula = y ~ ., 
  data = data_s5_small_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s5_small_r1, draws = 50)
ppc_dens_overlay(data_s5_small_r1$y, yrep)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s5_small_r1 <- get_refmodel(refm_fit_s5_small_r1)
```


```{r}
start.time <- Sys.time()

cvvs_5fold_s5_small_r1 <- cv_varsel(
  refm_obj_s5_small_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s5_small_r1, stats = "mlpd", deltas = TRUE)
```

X1, X6, X11, X16, X21, X26, X31, X36, X41, X46 are true predictors
ordering should be X1, X26, (X6, X11, X31, X36), (X16, X21, X41, X46)

```{r}
start.time <- Sys.time()

cvvs_10fold_s5_small_r1 <- cv_varsel(
  refm_obj_s5_small_r1,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_10fold_s5_small_r1, stats = "mlpd", deltas = TRUE)
```

X1, X6, X11, X16, X21, X26, X31, X36, X41, X46 are true predictors
ordering should be X1, X26, (X6, X11, X31, X36), (X16, X21, X41, X46)

##### defaults when fitting reference model

```{r}
start.time <- Sys.time()

refm_default_fit_s5_small_r1 <- brm(
  formula = y ~ ., 
  data = data_s5_small_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_default_fit_s5_small_r1, draws = 50)
ppc_dens_overlay(data_s5_small_r1$y, yrep)
```

```{r}
refm_default_obj_s5_small_r1 <- get_refmodel(refm_default_fit_s5_small_r1)
```



```{r}
start.time <- Sys.time()

cvvs_5fold_s5_small_r1_default_refm <- cv_varsel(
  refm_default_obj_s5_small_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s5_small_r1_default_refm, stats = "mlpd", deltas = TRUE)
```


### small n replication 2
```{r}
# read in the data and take a look
data_s5_small_r2 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.8_mixed.csv", sample_size = 100, replication = 2)

head(data_s5_small_r2)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s5_small_r2 <- brm(
  formula = y ~ ., 
  data = data_s5_small_r2,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s5_small_r2, draws = 50)
ppc_dens_overlay(data_s5_small_r2$y, yrep)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s5_small_r2 <- get_refmodel(refm_fit_s5_small_r2)
```



```{r}
start.time <- Sys.time()

cvvs_5fold_s5_small_r2 <- cv_varsel(
  refm_obj_s5_small_r2,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s5_small_r2, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

cvvs_10fold_s5_small_r2 <- cv_varsel(
  refm_obj_s5_small_r2,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_10fold_s5_small_r2, stats = "mlpd", deltas = TRUE)
```

#### confusion matrix
```{r}
# cross_validation list
cv_results_list <- list(
  "2-fold" = cvvs_2fold_s5_small_r1,
  "5-fold" = cvvs_5fold_s5_small_r1,
  "10-fold" = cvvs_10fold_s5_small_r1
)

# Define true predictors
true_predictors <- paste0("X", seq(1, 50, 5))

# Run the function and get the analysis results
generate_analysis_results(cv_results_list, true_predictors, custom_size = 10)
```

## large n
### large n replication 1
```{r}
# read in the data and take a look
data_s5_large_r1 <- load_filter_standardize_data("p50/sim_p50_t10_corr0.8_mixed.csv", sample_size = 400, replication = 1)

head(data_s5_large_r1)
```


#### reference model
```{r}
start.time <- Sys.time()

refm_fit_s5_large_r1 <- brm(
  formula = y ~ ., 
  data = data_s5_large_r1,  
  family = gaussian(),  
  prior = prior(horseshoe(par_ratio = par_ratio), class = "b"),  
  chains = 4, 
  iter = 2000,
  seed = seed,
  refresh = 0
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```


```{r}
yrep <- posterior_predict(refm_fit_s5_large_r1, draws = 50)
ppc_dens_overlay(data_s5_large_r1$y, yrep)
```


#### final cv_varsel() run kfold
```{r}
refm_obj_s5_large_r1 <- get_refmodel(refm_fit_s5_large_r1)
```


```{r}
start.time <- Sys.time()

cvvs_2fold_s5_large_r1 <- cv_varsel(
  refm_obj_s5_large_r1,
  cv_method = "kfold",
  K = 2,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_2fold_s5_large_r1, stats = "mlpd", deltas = TRUE)
```

```{r}
start.time <- Sys.time()

cvvs_5fold_s5_large_r1 <- cv_varsel(
  refm_obj_s5_large_r1,
  cv_method = "kfold",
  K = 5,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_5fold_s5_large_r1, stats = "mlpd", deltas = TRUE)
```



```{r}
start.time <- Sys.time()

cvvs_10fold_s5_large_r1 <- cv_varsel(
  refm_obj_s5_large_r1,
  cv_method = "kfold",
  K = 10,
  method = "forward",
  nclusters = 20,
  ndraws_pred = 400, 
  # nclusters_pred = 20,
  nterms_max = 11,
  seed = seed,
  verbose = FALSE
)

end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
```

```{r}
plot(cvvs_10fold_s5_large_r1, stats = "mlpd", deltas = TRUE)
```







